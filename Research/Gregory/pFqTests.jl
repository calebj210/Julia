#=
# Testing suite for generalized hypergeometric pFq using recursive, Gregory based quadrature
#
# Author: Caleb Jacobs
# DLM: September 5, 2023
=#

using Printf
include("Hypergeometric.jl")

## Tests in given in [a⃗, b⃗, z, "true soln"]
# pFp tests
pFpTest = 1.0 * [
# Scaling tests
    [[1],         [2],          .75, 1.489333355483566],    # 1F1
    [[1,1],       [2,2],        .75, 1.223732298068626],    # 2F2
    [[1,1,1],     [2,2,2],      .75, 1.105380699533618],    # 3F3
    [[1,1,1,1],   [2,2,2,2],    .75, 1.050644609874469],    # 4F4
    [[1,1,1,1,1], [2,2,2,2,2],  .75, 1.024668060581518],    # 5F5
# Counting tests
    [[1],         [2],           .75, 1.489333355483566],    # 1F1
    [[1,2],       [3,4],         .75, 1.140605185448613],    # 2F2
    [[1,2,3],     [4,5,6],       .75, 1.039182239647102],    # 3F3
    [[1,2,3,4],   [5,6,7,8],     .75, 1.010876629457741],    # 4F4
    [[1,2,3,4,5], [6,7,8,9,10],  .75, 1.00299078178221],     # 5F5
# Complex scaling tests
    [[1],         [2],          1+im, 1.378024613547364+0.909330673631479im],   # 1F1
    [[1,1],       [2,2],        1+im, 1.221604209247711+0.3807674788653629im],  # 2F2
    [[1,1,1],     [2,2,2],      1+im, 1.118307700449448+0.1670556064511437im],  # 3F3
    [[1,1,1,1],   [2,2,2,2],    1+im, 1.060905982208215+0.07611703200468601im], # 4F4
    [[1,1,1,1,1], [2,2,2,2,2],  1+im, 1.030866914737421+0.03568575143474989im], # 5F5
# Complex counting tests
    [[1],         [2],           1+im, 1.378024613547364+0.909330673631479im],      # 1F1
    [[1,2],       [3,4],         1+im, 1.158246086889573+0.2231272989900913im],     # 2F2
    [[1,2,3],     [4,5,6],       1+im, 1.049617025683541+0.05605177799930989im],    # 3F3
    [[1,2,3,4],   [5,6,7,8],     1+im, 1.014271480842442+0.01486608370336387im],    # 4F4
    [[1,2,3,4,5], [6,7,8,9,10],  1+im, 1.003967788440978+0.004020245098675681im],   # 5F5
]

# (p+1)Fp tests
pp1FpTest = 1.0 * [
# Scaling tests
    [[1,1],         [2],          .75, 1.848392481493188],      # 2F1
    [[1,1,1],       [2,2],        .75, 1.304625857240407],      # 3F2
    [[1,1,1,1],     [2,2,2],      .75, 1.125901078482939],      # 4F3
    [[1,1,1,1,1],   [2,2,2,2],    .75, 1.05629470396377],       # 5F4
    [[1,1,1,1,1,1], [2,2,2,2,2],  .75, 1.026313880799676],      # 6F5
# Counting tests
    [[1,2],         [3],           .75, 2.262379950648499],     # 2F1
    [[1,2,3],       [4,5],         .75, 1.334570964148759],     # 3F2
    [[1,2,3,4],     [5,6,7],       .75, 1.099854935058666],     # 4F3
    [[1,2,3,4,5],   [6,7,8,9],     .75, 1.031498691824615],     # 5F4
    [[1,2,3,4,5,6], [7,8,9,10,11], .75, 1.00994059805205],      # 6F5
# Complex scaling tests
    [[1,1],         [2],         1+im, 0.7853981633974483+0.7853981633974483im],    # 2F1
    [[1,1,1],       [2,2],       1+im, 1.038606195910602+0.4217559208425173im],     # 3F2
    [[1,1,1,1],     [2,2,2],     1+im, 1.069121162649931+0.197962279238993im],      # 4F3
    [[1,1,1,1,1],   [2,2,2,2],   1+im, 1.048679055127701+0.0893601415492818im],     # 5F4
    [[1,1,1,1,1,1], [2,2,2,2,2], 1+im, 1.027954133138767+0.04048747396865465im],    # 6F5
# Complex counting tests
    [[1,2],         [3],           1+im, 0.5707963267948966+im],                    # 2F1
    [[1,2,3],       [4,5],         1+im, 1.09112073197752+0.5269899939357501im],   # 3F2
    [[1,2,3,4],     [5,6,7],       1+im, 1.098139792075264+0.1613267314981126im],   # 4F3
    [[1,2,3,4,5],   [6,7,8,9],     1+im, 1.038886095182465+0.04590810049359684im],  # 5F4
    [[1,2,3,4,5,6], [7,8,9,10,11], 1+im, 0.987747727407494+0.0949486134178675im],  # 6F5
]

function runpFpTests(;n = 40, N = 20)
    errs = zeros(length(pFpTest))

    for i ∈ 1 : length(pFpTest)
        (a, b, z, tru) = pFpTest[i] # Get test parameters

        errs[i] = abs(pFq(a, b, z, n = n, N = N) - tru)
        @printf "Completed test #%d\n" i
    end

    return errs
end
function runpp1FpTests(;n = 80, N = 30, TN = 50)
    errs = zeros(length(pp1FpTest))

    for i ∈ 1 : length(pp1FpTest)
        (a, b, z, tru) = pp1FpTest[i] # Get test parameters

        errs[i] = abs(pFq(a, b, z, n = n, N = N, TN = TN) - tru)
        @printf "Completed test #%d\n" i
    end

    return errs
end
